#include <Eigen/Core>
#include <eigen-checks/gtest.h>
#include <glog/logging.h>
#include <gtest/gtest.h>
#include <typeinfo>

#include <aslam/cameras/camera.h>
#include <aslam/cameras/camera-factory.h>
#include <aslam/cameras/camera-pinhole.h>
#include <aslam/cameras/camera-generic-noncentral.h>
#include <aslam/cameras/camera-generic.h>
#include <aslam/cameras/camera-unified-projection.h>
#include <aslam/cameras/distortion.h>
#include <aslam/cameras/distortion-fisheye.h>
#include <aslam/cameras/distortion-radtan.h>
#include <aslam/cameras/distortion-equidistant.h>
#include <aslam/cameras/distortion-null.h>
#include <aslam/common/entrypoint.h>
#include <aslam/common/memory.h>
#include <aslam/common/numdiff-jacobian-tester.h>
#include <aslam/common/yaml-serialization.h>


aslam::GenericNoncentralCamera::Ptr setupTestCamera(){
  YAML::Node node = YAML::Load("{type: generic_noncentral, intrinsics: {rows: 6, cols: 1, data: [15,15,736,464,16,11]}, image_height: 480, image_width: 752, \
                                point_grid: {rows: 176, cols: 3, data: [-0.066084274900185, -0.012881031313106, -0.090562857670632, -0.034571825762724, 0.0053343128187209, -0.08965333444758, -0.057400216468639, -0.011139381225493, -0.078144507410798, -0.055079704325734, -0.012878768538272, -0.067004752948181, -0.045770728225397, -0.0052547551679348, -0.079104348690166, -0.044333974941821, -0.0027053479628458, -0.084407714191355, -0.043159407288054, -0.0040881284496017, -0.079049428567529, -0.041561554172354, 0.00031418009935828, -0.086708127654604, -0.041818343971539, 0.0028230717968722, -0.089635266867526, -0.04204499385736, 0.0036036412426597, -0.091027245013184, -0.039717268000164, -0.00091332075473644, -0.083200701292989, -0.036459310037388, -0.0035136209916259, -0.081588651767357, -0.03318718348104, -0.0071962077849641, -0.077564512118816, -0.016217119181316, -0.019820054889848, -0.065081157057781, -0.031807855681365, -0.003913852818676, -0.085976400909329, -0.0027250242629587, -0.054989143460375, -0.050448375460111, -0.05250721848467, -0.0025930695541267, -0.071764832687545, -0.062036902242098, -0.011748521002839, -0.068567775417995, -0.054484974984549, -0.0067256400480557, -0.072726551676344, -0.048839057807747, -0.0040728873194929, -0.07695611519758, -0.046470117987479, -0.0028907122569727, -0.078968116360701, -0.044039800654509, -0.0016445013625134, -0.080715165039436, -0.042317214478045, 0.00077674534761745, -0.085271409401915, -0.041662236390002, 0.0020074116460164, -0.087532128006465, -0.041632574414628, 0.0030411430715159, -0.089575459481641, -0.041546197279926, 0.0025849780278294, -0.088888230427063, -0.040706867724969, 0.0016497753615485, -0.087415643682915, -0.039084241245417, 6.5152711768065e-05, -0.084754580827905, -0.034552350724255, -0.0032452903358025, -0.080042434342669, -0.029637071193266, -0.0058100092483192, -0.077009448401103, -0.016661510197967, -0.014048510411849, -0.069092234873272, 0.048316758053025, -0.04977399442508, -0.024086880581592, -0.048048693241678, 0.0019357737545191, -0.085991495474141, -0.063045698565682, -0.0069848191078954, -0.06738356718407, -0.053864218811822, -0.0048599297797603, -0.071426808034551, -0.047909612927989, -0.0017774506561913, -0.078444566091974, -0.044698551428616, 2.513979830922e-05, -0.081945912330553, -0.042473323955564, 0.0020981769930862, -0.08695181019391, -0.041967483847801, 0.0025521799059471, -0.088072345180851, -0.041726195078658, 0.0030382389677685, -0.089386498567745, -0.041762175748227, 0.0032702840145577, -0.090106122696307, -0.041716604230071, 0.0031758755419119, -0.089651466500167, -0.04101053906568, 0.0023768646036449, -0.0878905477905, -0.03977623396037, 0.001593908484509, -0.08623429537019, -0.037596287086425, 0.00046487115707782, -0.083953833079527, -0.031640978934675, -0.0028825476723672, -0.07837021254892, -0.017546692126316, -0.009005099716704, -0.068526029861685, 0.0078297696520686, -0.018379294012208, -0.055945022030819, -0.045917586774349, 0.0028852368920609, -0.09573271717988, -0.059247685954969, -0.0027233321847101, -0.069051651344409, -0.05454178466802, -0.0021421968745318, -0.071200681697525, -0.048277682673255, -0.00050905194898586, -0.076819675048448, -0.044361045867046, 0.0011563550751296, -0.082834025331565, -0.042322333305411, 0.0023856302474988, -0.087143996673956, -0.041873874650215, 0.0029309649390708, -0.08900331214842, -0.041754538923894, 0.003026859073099, -0.089348389951844, -0.041712100689848, 0.0031871255501946, -0.089881153357712, -0.041658876786119, 0.0031074213283879, -0.089651396413299, -0.041397417230916, 0.0030163982183287, -0.089092622475975, -0.04089341589231, 0.0028521369216603, -0.088263174938609, -0.03846235326175, 0.0015513899093137, -0.084902289933197, -0.032028252991362, -0.0008264452251309, -0.078527797907129, -0.020647026988313, -0.0042540422584044, -0.070889315364845, -0.011958631174162, -0.0048898168022382, -0.070075280080272, -0.062470835797286, 0.00030785044495294, -0.064455368472782, -0.058152974240183, 3.7045142486689e-05, -0.072241410308251, -0.053806065545152, 0.00038845557874521, -0.070359301811223, -0.048759663463164, 0.0010213214176314, -0.075858838703297, -0.04498800932013, 0.0017163623096383, -0.080603136445615, -0.042979036228779, 0.0023050455139631, -0.084631976334394, -0.042110165913223, 0.002570532089126, -0.086346732002524, -0.041725205271593, 0.0028544645731991, -0.087901511833836, -0.041513312407965, 0.0028901014453939, -0.088177601041554, -0.041283465583727, 0.0029007624988569, -0.088183730771165, -0.040973602510847, 0.0028569745640659, -0.088097891501771, -0.040363705704422, 0.0026630816884055, -0.087289614046016, -0.037722534362687, 0.0020200229687802, -0.08375176170296, -0.03107552287292, 0.00057645542590766, -0.077414924858229, -0.022608450571221, -0.00064919410999789, -0.072566953375389, -0.0094735139332153, -0.0033482886334215, -0.065684430724515, -0.067110510612959, 0.0011737969182767, -0.065645879588163, -0.060574392474505, 0.0029409436229267, -0.066401201344308, -0.053861219032444, 0.002776365113903, -0.071180194454078, -0.049382268958506, 0.0029468326946018, -0.074452971198395, -0.046181458783992, 0.0027567579104607, -0.07743465240375, -0.04376893225453, 0.0028187783122197, -0.08059460645062, -0.042459770994775, 0.0029271819353339, -0.083183833465535, -0.041650801534803, 0.0028859091499468, -0.084372081413405, -0.041066558410415, 0.0029197891466723, -0.084989809538301, -0.040553199559426, 0.00293693527225, -0.085461892887605, -0.03996582627167, 0.0029248583223339, -0.085289422362059, -0.038696319134867, 0.0028480915471686, -0.084116372844189, -0.035600586575127, 0.0026335880863713, -0.080763878658068, -0.03001803314184, 0.0024074642717581, -0.076240041244695, -0.01948164657046, 0.0016936918075076, -0.069034960606518, 0.0070449470854345, -0.00029820842281872, -0.054192801951336, -0.073257100739672, 0.0074329386714205, -0.05883957036548, -0.062994375914454, 0.0063923053968402, -0.064369386720691, -0.053238804634534, 0.0052816076580677, -0.07162175664909, -0.048903739753739, 0.0048479189613241, -0.075173696223877, -0.046960310214038, 0.0046847003574289, -0.075213786957674, -0.044519468955295, 0.0043344081827048, -0.077273101191119, -0.042778685495057, 0.0040280966771012, -0.079605431361176, -0.041607656751953, 0.0039519254178929, -0.080488209159654, -0.040424153315817, 0.003839228787922, -0.080412846397217, -0.039443815286908, 0.0037871740342339, -0.081312829480143, -0.038504103230595, 0.0037652595711396, -0.081747464618556, -0.036572376702832, 0.0038994794062772, -0.080043380297391, -0.033025237458374, 0.0041710468791478, -0.077176999791062, -0.026999675527165, 0.0045556348583192, -0.072735827932233, -0.013966260284452, 0.0054240885312525, -0.064160444851298, 0.019483841809184, 0.0080273585569033, -0.043666231821937, -0.07184776914928, 0.01219176594328, -0.063429180314575, -0.063253732458419, 0.010365183148888, -0.063687015735051, -0.053929791328475, 0.0080852724344784, -0.070670254181463, -0.04902847405634, 0.0067895131770581, -0.075422912698349, -0.046748662734915, 0.0064954461630652, -0.075871132301597, -0.045000831457712, 0.0063070977656211, -0.075697106990929, -0.043188821257703, 0.0060625580684961, -0.075710808323898, -0.041520533666218, 0.0059323447605134, -0.076037515743954, -0.03979035644956, 0.0060416610045669, -0.075806521298947, -0.038068073823298, 0.0058969560244746, -0.076106697311685, -0.036528686497607, 0.0058664692675498, -0.076563166266104, -0.03381248895657, 0.0062479832504258, -0.074997424682489, -0.029409518587661, 0.00703467042859, -0.071993060818886, -0.020934166455885, 0.0085553483369044, -0.06618761229565, -0.007940157115968, 0.010894513732379, -0.059360700784825, 0.016765167525542, 0.016474633539907, -0.048724452905455, -0.062671203641404, 0.010410151662387, -0.072673195602787, -0.061043080127881, 0.013308344604066, -0.066470872927707, -0.052059394128526, 0.0097155676533403, -0.074143826576928, -0.047997741356121, 0.0081343264966587, -0.077049127307387, -0.045850633364578, 0.0074757909678598, -0.078765815574394, -0.045372693827331, 0.0084255862896147, -0.075145440423379, -0.043765248851224, 0.0093954773980302, -0.07129675656332, -0.041297852986264, 0.0095726399531962, -0.07026830091542, -0.039038246868904, 0.0093210382747423, -0.071159828353919, -0.03673717712206, 0.0094760206477071, -0.071052893952638, -0.033976447660893, 0.00957787919954, -0.070757180300513, -0.030727405370351, 0.010238958591661, -0.06966924951844, -0.024301296160006, 0.012089765276026, -0.065199329517749, -0.014319952138297, 0.015081661812251, -0.059341680670595, 0.00025612782741519, 0.018930835734862, -0.053786652345872, 0.0061106072682645, 0.019908541897526, -0.057491050994449, -0.086579738360737, 0.029944109465302, -0.0470804695739, -0.055696813136981, 0.012979148959251, -0.073591823465501, -0.05042610998737, 0.010344119480244, -0.077181701080951, -0.046950209946823, 0.0085653580751859, -0.080023598343955, -0.045466489597693, 0.0081671600497332, -0.080026808328242, -0.045513441428186, 0.010388726274116, -0.075376604239931, -0.044216065524753, 0.013196595113828, -0.068993767214788, -0.041402489799002, 0.014894733426126, -0.065033165387592, -0.038094969641193, 0.014331199142751, -0.066008037238657, -0.035475826725482, 0.013885957740509, -0.067565038991547, -0.032157109212605, 0.014712241985431, -0.066582739331457, -0.026936018951336, 0.016386276480372, -0.063385041056031, -0.018742645871085, 0.019850447871005, -0.058163755392944, -0.0063900923898551, 0.024571451604607, -0.052496315935377, 0.0057332825472602, 0.028273102991792, -0.049798449343752, 0.021136257706498, 0.029823810288868, -0.050515596946242, -0.067225630717088, 0.042701429762628, -0.071072483641517, -0.048059822676108, 0.012193208616056, -0.080127209620108, -0.047110167821838, 0.0089272911143636, -0.084377679626335, -0.051895013735275, 0.015787388004838, -0.069976911158778, -0.048642423356135, 0.013942570297501, -0.072216819501798, -0.045587001326234, 0.013409264668292, -0.073829400563618, -0.043802768592889, 0.014889729370595, -0.072615476753042, -0.040911068550891, 0.017443137883892, -0.068195326192807, -0.038388946946517, 0.020882880284368, -0.06206495495316, -0.032610033844164, 0.021702942878571, -0.059102252263063, -0.032029995890983, 0.018502092655494, -0.066905681895032, -0.024156892065721, 0.024120044678703, -0.060103662423314, -0.0089043275307184, 0.033049517163164, -0.047881560607376, -0.0012485708153116, 0.034136467932427, -0.050597027577577, -0.0043411699861505, 0.031163698857442, -0.065790681222023, 0.0011511446947918, 0.031158044696502, -0.059550229320164]},\
                                direction_grid: {rows: 176, cols: 3, data: [-0.71188320687955, -0.47687323346763, 0.51557173988206, -0.62930164010641, -0.51150232028358, 0.58510240309189, -0.53647116168018, -0.52625496133356, 0.65973813620052, -0.44295761778155, -0.54885857544904, 0.70890254126033, -0.34184775983289, -0.56467581703931, 0.7511866151285, -0.23480841527301, -0.57732339313901, 0.782024748874, -0.1256349734254, -0.58864398036185, 0.79857004566673, -0.014212844232233, -0.59456421050156, 0.80392250537567, 0.097174433571118, -0.59855751411532, 0.79516415396836, 0.20627273963745, -0.59844620565188, 0.77415353504542, 0.31296831768683, -0.59558959910058, 0.73981339645041, 0.41330016174687, -0.58812910221111, 0.69518856106265, 0.50913868456154, -0.57871607230505, 0.63707574709665, 0.59496125970226, -0.56384023853632, 0.57280475282665, 0.67574127409565, -0.5493836443122, 0.49147872980001, 0.73828069345963, -0.53433678754571, 0.41161367219774, -0.71873231746001, -0.40175554259994, 0.56746483576411, -0.63515345462424, -0.41708713225942, 0.65009108068217, -0.5435456932425, -0.43852367003395, 0.71571996631189, -0.44627778865713, -0.45410730404256, 0.7711178196401, -0.34180627120472, -0.46864477737225, 0.81457998109875, -0.23309438503929, -0.48026354282805, 0.84558496740032, -0.12079110654949, -0.48921105279002, 0.86376041493381, -0.0070882722738993, -0.4955813119293, 0.8685326244089, 0.10662299661961, -0.49887233684161, 0.86009181377691, 0.21858352261941, -0.49924250509227, 0.83843793136313, 0.32710010128923, -0.49673505339418, 0.80390286133715, 0.4308104874651, -0.49146517398741, 0.75687799984383, 0.5277269776979, -0.48306704516155, 0.69867765592491, 0.61721164866428, -0.47232241433317, 0.62925457302399, 0.69668108113115, -0.4582318004208, 0.55195931759237, 0.76996982188596, -0.44202761398691, 0.46017177429515, -0.72402781471416, -0.30428942427044, 0.61902477316938, -0.63858951371785, -0.32377049174822, 0.69812327109381, -0.54789975729464, -0.33852587653166, 0.76498763838048, -0.44746223018755, -0.35279602657497, 0.82177400554441, -0.34157096023581, -0.36495363712636, 0.86610514481316, -0.23038872985005, -0.37495704950113, 0.89795781871282, -0.116358697939, -0.38294978346843, 0.91641154333379, -0.00044907780411909, -0.38854037478322, 0.92143159024012, 0.11519163481525, -0.39179299209327, 0.91281385759375, 0.22914746382262, -0.39277454950893, 0.89062876277477, 0.33957600209151, -0.39122626394418, 0.85535381521557, 0.4449111508363, -0.38729807419636, 0.8074987737361, 0.5436593026123, -0.38112603315436, 0.74778172586332, 0.63453544036912, -0.37247016327345, 0.67722282329129, 0.71603284434756, -0.36198409628989, 0.59687894907488, 0.78745530793574, -0.34798888487094, 0.50874146087193, -0.72176180782099, -0.20978313230691, 0.65958390684619, -0.64291698088844, -0.22181977850205, 0.73311236625131, -0.54829433731316, -0.2348946744815, 0.8026193441293, -0.44775992144625, -0.24587816610528, 0.85968306961295, -0.33999465786633, -0.2557763077813, 0.90497630521474, -0.22780190370051, -0.26410759980823, 0.93720513677314, -0.11200001773895, -0.27079560999698, 0.95609922792189, 0.0052358273081815, -0.27574192078141, 0.96121744638567, 0.12236510789447, -0.27892321819302, 0.95248549528212, 0.23764578246569, -0.28026374964947, 0.93004124247728, 0.3494156364289, -0.27981021671067, 0.8942119187549, 0.45612181790658, -0.27755089105533, 0.84552846794415, 0.55605848105954, -0.27322772538658, 0.78494940965761, 0.64796529468242, -0.2673471316471, 0.71320858666115, 0.73050946856866, -0.2594805410708, 0.63168486220357, 0.80231971707739, -0.25134931308377, 0.5413931975941, -0.73169701656483, -0.10958586772598, 0.67276326708945, -0.64117235518283, -0.11691924086138, 0.75843780368973, -0.54934796868582, -0.12667939775096, 0.82593531192595, -0.44626080736426, -0.13505042208174, 0.88465398620373, -0.33805924430683, -0.14255575396186, 0.93026544832701, -0.22456638173799, -0.14911812302591, 0.96298168496516, -0.10809813946526, -0.15458291666558, 0.98204832575557, 0.010120557010557, -0.15884687801246, 0.98725135789802, 0.12806109541621, -0.16190110509089, 0.97846225681482, 0.24415413700759, -0.16375666070492, 0.95580987306935, 0.35670511803324, -0.16424777060941, 0.91966522638335, 0.46407974045502, -0.1634548861708, 0.87058169903008, 0.56481592905509, -0.16145968933688, 0.80926740636508, 0.6572865612056, -0.15795664344533, 0.73690167271489, 0.74030319660232, -0.15358993557355, 0.65449316939973, 0.81372882414084, -0.14781119841057, 0.5621363272257, -0.72599139175628, -0.0015783852226858, 0.68770197600114, -0.6411151509512, -0.010887280157402, 0.76736746761352, -0.54591417168934, -0.016157230054191, 0.83768529954018, -0.44382930550332, -0.022018375285498, 0.8958407998781, -0.33497169595247, -0.027100771630784, 0.94183836781464, -0.22149201940154, -0.031816328143429, 0.97464301495722, -0.10441060563822, -0.035996761464076, 0.99388261811663, 0.013909920565858, -0.039511236098361, 0.99912230298989, 0.13214285031459, -0.042492336605974, 0.99031947796683, 0.24845535695674, -0.044710611569237, 0.9676109222268, 0.36137442681223, -0.04624244017046, 0.93127340795988, 0.46886300046047, -0.047055492824446, 0.88201659133729, 0.56975635187659, -0.047083706028688, 0.82046378599112, 0.66235170066854, -0.046459682583294, 0.74775111000637, 0.74579414598211, -0.045011193070427, 0.66465410877929, 0.81701074246474, -0.042615273420397, 0.57504555051623, -0.72177321149957, 0.099030432843777, 0.68500832442561, -0.63579428194811, 0.09669464346611, 0.76577789010068, -0.54207020261965, 0.094202588346874, 0.83503638709978, -0.440142766551, 0.091544518240152, 0.8932490952881, -0.33145272120148, 0.088957241768358, 0.93926870635889, -0.21801928220069, 0.086103648078151, 0.97213875263582, -0.10145075539736, 0.083248996987109, 0.99135127413543, 0.01668421997459, 0.080278808756299, 0.99663280583599, 0.13458401278478, 0.07759860587094, 0.98785909919868, 0.25064353052645, 0.074912308746097, 0.96517665046538, 0.36303204905251, 0.072420147855971, 0.92895804724716, 0.47038859429247, 0.070014855764144, 0.87967749222762, 0.57082646878674, 0.067831928586279, 0.81826399896166, 0.66323295921648, 0.065849417850499, 0.74551049353963, 0.74597265128779, 0.064186623984202, 0.66287621833354, 0.81869507406047, 0.062517857629039, 0.57081511296268, -0.71268405567389, 0.20022973735711, 0.6723016354778, -0.62970714599344, 0.20282978299454, 0.74988598427707, -0.53631191732596, 0.2037843314677, 0.81904912769773, -0.43456293106189, 0.20404610499703, 0.8772230309234, -0.32716624254652, 0.20375772049458, 0.92273779649305, -0.21467994530682, 0.20279315496612, 0.95539910894974, -0.09887646626968, 0.2012620173774, 0.97453427070535, 0.018352380079077, 0.19920121706986, 0.97978674478854, 0.13543676057774, 0.19646175984272, 0.97111258914902, 0.25056700380666, 0.19351854679758, 0.94856035582809, 0.36222693861015, 0.18986246965416, 0.9125480193184, 0.46854815969299, 0.18607491704778, 0.86361956166704, 0.56818834053845, 0.18172390771087, 0.80258235156428, 0.65952470537392, 0.17724431020041, 0.73048724663955, 0.74178868936293, 0.17232920666195, 0.64811433008729, 0.81219167095377, 0.16626638822506, 0.55919601016095, -0.70326711641743, 0.30275549418503, 0.64323749401499, -0.62115009405664, 0.30593329868826, 0.72151048322747, -0.52859226838792, 0.31026540531528, 0.79014276688777, -0.42884863578297, 0.31374011234158, 0.84714578998834, -0.32234284427204, 0.31567069306924, 0.89243885184577, -0.21112421918613, 0.31666730446782, 0.92474233295234, -0.096846828135115, 0.31640417560493, 0.94366789154868, 0.018861587882781, 0.31506507811877, 0.94888262554046, 0.13449081448824, 0.31270191291285, 0.94028173143954, 0.24828442098651, 0.30906440543803, 0.918059932459, 0.35822406079089, 0.30482713662057, 0.8824714947522, 0.46329562989229, 0.29915573661622, 0.83418403519386, 0.56153341193258, 0.29300315023274, 0.77384066915422, 0.6519063201315, 0.28567950544778, 0.70242819557569, 0.73214184013001, 0.27766095510855, 0.62199093236095, 0.805192017921, 0.26726064753143, 0.52937468824774, -0.68916210671637, 0.39101740473308, 0.61004998144583, -0.61025052945975, 0.40527816423126, 0.68069369094434, -0.51926702161751, 0.41271378072967, 0.74835091732175, -0.42112389259506, 0.41848909551403, 0.80468723366376, -0.31675312380879, 0.42305261247901, 0.84893695032791, -0.20774634219143, 0.42585913642691, 0.8806165188252, -0.09538560617305, 0.42693073521648, 0.89923953063826, 0.018675441541251, 0.42625581056529, 0.90440986938587, 0.13177406840628, 0.42400092119014, 0.89602389126941, 0.24350000042928, 0.42017370074718, 0.87416349214055, 0.35181743879429, 0.41452597743057, 0.83928106364642, 0.45479750145311, 0.40805077076818, 0.79161467971956, 0.55152952371824, 0.39951858856242, 0.73225684145675, 0.63951767900016, 0.38989673047396, 0.66256899852919, 0.71976786970033, 0.37894540136292, 0.58166536473556, 0.78483782537407, 0.37070390609447, 0.49659661886525, -0.67315773368106, 0.48499914595293, 0.55824232552746, -0.59866858058459, 0.49428573884258, 0.63029956290456, -0.50857444993722, 0.50831840530651, 0.69495642143785, -0.41438829767128, 0.51728192287034, 0.74880020768204, -0.31052672462184, 0.52442379121974, 0.79281324440145, -0.20411137301133, 0.52869499627281, 0.82390542438045, -0.094235367163275, 0.53108347325599, 0.84206296677265, 0.015295271396383, 0.53145060791429, 0.84695118278472, 0.12897742827824, 0.52893512459661, 0.83880418272842, 0.23653158407337, 0.52530574410853, 0.81737793274735, 0.34319217311222, 0.51902579837672, 0.78283545712616, 0.44227429433825, 0.50955381580885, 0.7380706994335, 0.53632831037655, 0.50043365410486, 0.67964557037319, 0.62302081305494, 0.48811986274823, 0.61121523712274, 0.69819207392767, 0.47294539438708, 0.53744812013126, 0.77199372531188, 0.45486077784238, 0.44399027113183]}}");
  
  aslam::Camera::Ptr camera = aslam::createCamera(node);
  EXPECT_TRUE(camera.get() != nullptr);
  //EXPECT_EQ(typeid(*camera.get()), typeid(aslam::GenericCamera));
  EXPECT_EQ(typeid(*camera.get()), typeid(aslam::GenericNoncentralCamera));
  return std::dynamic_pointer_cast<aslam::GenericNoncentralCamera>(camera);
}

TEST(TestGenericNoncentralCamera, ReadFromYAML) {
  aslam::GenericNoncentralCamera::Ptr gencam = setupTestCamera();
  EXPECT_EQ(480u, gencam->imageHeight());
  EXPECT_EQ(752u, gencam->imageWidth());
  EXPECT_EQ(15, gencam->calibrationMinX());
  EXPECT_EQ(15, gencam->calibrationMinY());
  EXPECT_EQ(736, gencam->calibrationMaxX());
  EXPECT_EQ(464, gencam->calibrationMaxY());
  EXPECT_EQ(16, gencam->gridWidth());
  EXPECT_EQ(11, gencam->gridHeight());
  Eigen::Vector3d solutionFirstPointGridValue = Eigen::Vector3d(-0.066084274900185, -0.012881031313106, -0.090562857670632);
  EXPECT_EQ(solutionFirstPointGridValue.x(), gencam->firstPointGridValue().x());
  EXPECT_EQ(solutionFirstPointGridValue.y(), gencam->firstPointGridValue().y());
  EXPECT_EQ(solutionFirstPointGridValue.z(), gencam->firstPointGridValue().z());
  Eigen::Vector3d solutionLastPointGridValue = Eigen::Vector3d(0.0011511446947918, 0.031158044696502, -0.059550229320164);
  EXPECT_EQ(solutionLastPointGridValue.x(), gencam->lastPointGridValue().x());
  EXPECT_EQ(solutionLastPointGridValue.y(), gencam->lastPointGridValue().y());
  EXPECT_EQ(solutionLastPointGridValue.z(), gencam->lastPointGridValue().z());
  Eigen::Vector3d solutionFirstDirectionGridValue = Eigen::Vector3d(-0.71188320687955, -0.47687323346763, 0.51557173988206).normalized();
  EXPECT_EQ(solutionFirstDirectionGridValue.x(), gencam->firstDirectionGridValue().x());
  EXPECT_EQ(solutionFirstDirectionGridValue.y(), gencam->firstDirectionGridValue().y());
  EXPECT_EQ(solutionFirstDirectionGridValue.z(), gencam->firstDirectionGridValue().z());
  Eigen::Vector3d solutionLastDirectionGridValue = Eigen::Vector3d(0.77199372531188, 0.45486077784238, 0.44399027113183).normalized();
  EXPECT_EQ(solutionLastDirectionGridValue.x(), gencam->lastDirectionGridValue().x());
  EXPECT_EQ(solutionLastDirectionGridValue.y(), gencam->lastDirectionGridValue().y());
  EXPECT_EQ(solutionLastDirectionGridValue.z(), gencam->lastDirectionGridValue().z());
  // To keep the yaml simple, if there is no id, a random id is created.
  EXPECT_TRUE(gencam->getId().isValid());
  EXPECT_EQ(0u, gencam->getLineDelayNanoSeconds());
  EXPECT_EQ(aslam::NullDistortion(), gencam->getDistortion());
}


  
TEST(TestGenericNoncentralCamera, Constructors) {
  aslam::Distortion::UniquePtr distortion;
  Eigen::Matrix< double, 6+3*4*4*2, 1 > intrinsics;
  intrinsics << 1, 1, 299, 199, 4, 4;
  for(int i = 6; i < 6+3*4*4*2; i++) intrinsics(i) = (i)*(i);

  aslam::GenericNoncentralCamera g();

  distortion.reset(new aslam::NullDistortion());
  aslam::GenericNoncentralCamera g1(intrinsics, 300, 200, distortion);

  Eigen::Vector4d distortion_params = {1,2,3,4};
  distortion.reset(new aslam::EquidistantDistortion(distortion_params));
  aslam::GenericNoncentralCamera g2(intrinsics, 300, 200, distortion);

  aslam::GenericNoncentralCamera g3(intrinsics, 200, 300);

  aslam::GenericNoncentralCamera g4(g3);

}

TEST(TestGenericNoncentralCamera, BackProject6) {
  aslam::GenericNoncentralCamera::Ptr gencam = setupTestCamera();

  Eigen::ParametrizedLine<double, 3> line;
  Eigen::Vector2d notInCalibratedArea = Eigen::Vector2d(9, 14);
  bool backProjectWorked = gencam->backProject6(notInCalibratedArea, &line);
  EXPECT_EQ(backProjectWorked, false);
  
  // Test that projection at gridpoints is equal to vector at gridpoint
  Eigen::Vector2d gridpoint = Eigen::Vector2d(5,3);
  Eigen::Vector2d keypoint = gencam->transformGridPointToImagePixel(gridpoint);
  backProjectWorked = gencam->backProject6(keypoint, &line);
  EXPECT_TRUE(backProjectWorked);

  Eigen::Vector3d solutionOrigin = gencam->pointGridAccess(gridpoint);
  Eigen::Vector3d solutionDirection = gencam->directionGridAccess(gridpoint);
  EXPECT_NEAR(line.direction().x(), solutionDirection.x(), 1e-3);
  EXPECT_NEAR(line.direction().y(), solutionDirection.y(), 1e-3);
  EXPECT_NEAR(line.direction().z(), solutionDirection.z(), 1e-3);
  EXPECT_NEAR(line.origin().x(), solutionOrigin.x(), 1e-3);
  EXPECT_NEAR(line.origin().y(), solutionOrigin.y(), 1e-3);
  EXPECT_NEAR(line.origin().z(), solutionOrigin.z(), 1e-3);
}



TEST(TestGenericNoncentralCamera, BackProject3WithJacobian) {
  aslam::GenericNoncentralCamera::Ptr gencam = setupTestCamera();

  Eigen::ParametrizedLine<double, 3> line;
  Eigen::Matrix<double, 6, 2> jacobian;
  Eigen::Vector2d notInCalibratedArea = Eigen::Vector2d(9, 14);
  bool backProjectWorked = gencam->backProject6WithJacobian(notInCalibratedArea, &line, &jacobian);
  EXPECT_EQ(backProjectWorked, false);
  
  // Test that projection at gridpoints is equal to vector at gridpoint
  Eigen::Vector2d gridpoint = Eigen::Vector2d(5,3);
  Eigen::Vector2d keypoint = gencam->transformGridPointToImagePixel(gridpoint);
  backProjectWorked = gencam->backProject6WithJacobian(keypoint, &line, &jacobian);
  EXPECT_TRUE(backProjectWorked);

  Eigen::Vector3d solutionOrigin = gencam->pointGridAccess(gridpoint);
  Eigen::Vector3d solutionDirection = gencam->directionGridAccess(gridpoint);
  EXPECT_NEAR(line.direction().x(), solutionDirection.x(), 1e-3);
  EXPECT_NEAR(line.direction().y(), solutionDirection.y(), 1e-3);
  EXPECT_NEAR(line.direction().z(), solutionDirection.z(), 1e-3);
  EXPECT_NEAR(line.origin().x(), solutionOrigin.x(), 1e-3);
  EXPECT_NEAR(line.origin().y(), solutionOrigin.y(), 1e-3);
  EXPECT_NEAR(line.origin().z(), solutionOrigin.z(), 1e-3);
}

TEST(TestGenericNoncentralCamera, BackProjectAndProject) {
  aslam::GenericNoncentralCamera::Ptr gencam = setupTestCamera();

  // check for all calibrated pixels
  for(int i = gencam->calibrationMinX(); i < gencam->calibrationMaxX(); i += 7){
    for(int j = gencam->calibrationMinY(); j < gencam->calibrationMaxY(); j += 5){
      for(int step = 1; step < 50; step += 5){

        Eigen::ParametrizedLine<double, 3> line;
        Eigen::Vector2d keypoint = Eigen::Vector2d(i, j);
        bool backProjectWorked = gencam->backProject6(keypoint, &line);
        EXPECT_TRUE(backProjectWorked);

        Eigen::Vector2d out_keypoint;
        aslam::ProjectionResult projectionWorked = gencam->project3(line.origin() + step * line.direction(), &out_keypoint);
        EXPECT_EQ(projectionWorked, aslam::ProjectionResult(aslam::ProjectionResult::Status::KEYPOINT_VISIBLE));

        EXPECT_NEAR(out_keypoint.x(), keypoint.x(), 1e-5);
        EXPECT_NEAR(out_keypoint.y(), keypoint.y(), 1e-5);
      }
    }
  }
}


TEST(TestGenericNoncentralCamera, gridPixelTransformation) {
  aslam::GenericNoncentralCamera::Ptr gencam = setupTestCamera();
  
  // Test that grid to pixel is the inverse of pixel to grid
  // starting from pixel
  Eigen::Vector2d a = Eigen::Vector2d(21.2, 5.3);
  Eigen::Vector2d a_grid = gencam->transformImagePixelToGridPoint(a);
  Eigen::Vector2d a_pixel = gencam->transformGridPointToImagePixel(a_grid);
  EXPECT_DOUBLE_EQ(a.x(), a_pixel.x());
  EXPECT_DOUBLE_EQ(a.y(), a_pixel.y());

  // starting from grid
  Eigen::Vector2d b = Eigen::Vector2d(14.0, 9.0);
  Eigen::Vector2d b_pixel = gencam->transformGridPointToImagePixel(b);
  LOG(ERROR) << b_pixel;
  Eigen::Vector2d b_grid = gencam->transformImagePixelToGridPoint(b_pixel);
  EXPECT_DOUBLE_EQ(b.x(), b_grid.x());
  EXPECT_DOUBLE_EQ(b.y(), b_grid.y());

  // pixel (15, 15) is gridpoint (1,1), known from camera intrinsics
  Eigen::Vector2d c = Eigen::Vector2d(15, 15);
  Eigen::Vector2d c_grid = gencam->transformImagePixelToGridPoint(c);
  EXPECT_DOUBLE_EQ(c_grid.x(), 1);
  EXPECT_DOUBLE_EQ(c_grid.y(), 1);
  Eigen::Vector2d c_pixel = gencam->transformGridPointToImagePixel(c_grid);
  EXPECT_DOUBLE_EQ(c.x(), c_pixel.x());
  EXPECT_DOUBLE_EQ(c.y(), c_pixel.y());
}

// solution computed with original generic camera calibration with same calibration file

TEST(TestGenericNoncentralCamera, compareWithOriginalImplementation) {
  aslam::GenericNoncentralCamera::Ptr gencam = setupTestCamera();

  const Eigen::Vector2d pixel = Eigen::Vector2d(50, 70);

  Eigen::ParametrizedLine<double, 3> line;
  bool backProjectWorked = gencam->backProject6(pixel, &line);
  EXPECT_TRUE(backProjectWorked);
  EXPECT_DOUBLE_EQ(line.origin().x(), -0.057019112624052695);
  EXPECT_DOUBLE_EQ(line.origin().y(), -0.0055489981354388106);
  EXPECT_DOUBLE_EQ(line.origin().z(), -0.070511116266176968);
  EXPECT_DOUBLE_EQ(line.direction().x(), -0.58303910075952725);
  EXPECT_DOUBLE_EQ(line.direction().y(), -0.33570175041157252);
  EXPECT_DOUBLE_EQ(line.direction().z(), 0.7398444037472528);


  Eigen::Matrix<double, 6, 2> jacobian_pixel;
  Eigen::ParametrizedLine<double, 3> lineWithJacobian;
  backProjectWorked = gencam->backProject6WithJacobian(pixel, &lineWithJacobian, &jacobian_pixel);
  EXPECT_TRUE(backProjectWorked);
  EXPECT_DOUBLE_EQ(lineWithJacobian.origin().x(), -0.057019112624061744);
  EXPECT_DOUBLE_EQ(lineWithJacobian.origin().y(), -0.0055489981354398367 );
  EXPECT_DOUBLE_EQ(lineWithJacobian.origin().z(), -0.070511116266188112);
  EXPECT_DOUBLE_EQ(lineWithJacobian.direction().x(), -0.58303907238390484);
  EXPECT_DOUBLE_EQ(lineWithJacobian.direction().y(), -0.3357017340734853);
  EXPECT_DOUBLE_EQ(lineWithJacobian.direction().z(), 0.7398443677401535);
  EXPECT_NEAR(jacobian_pixel(0,0), 0.0016734134478066033, 1e-10);
  EXPECT_NEAR(jacobian_pixel(0,1), -5.310178678615848e-05, 1e-10);
  EXPECT_NEAR(jacobian_pixel(1,0), -0.00028071692645575898, 1e-10);
  EXPECT_NEAR(jacobian_pixel(1,1), 0.0017864048497428829, 1e-10);
  EXPECT_NEAR(jacobian_pixel(2,0), 0.0011913698390579675, 1e-10);
  EXPECT_NEAR(jacobian_pixel(2,1), 0.00076872760556473451, 1e-10);
  EXPECT_NEAR(jacobian_pixel(3,0), 0.00011247266025699871, 1e-10);
  EXPECT_NEAR(jacobian_pixel(3,1), 9.7367111966434772e-06, 1e-10);
  EXPECT_NEAR(jacobian_pixel(4,0), 3.1221766045579053e-05, 1e-10);
  EXPECT_NEAR(jacobian_pixel(4,1), 5.5903722607695221e-05, 1e-10);
  EXPECT_NEAR(jacobian_pixel(5,0), -5.1198984735831831e-05, 1e-10);
  EXPECT_NEAR(jacobian_pixel(5,1), 4.7389630102876525e-06, 1e-10);



  Eigen::Vector2d out_keypoint;
  for(int i = 1; i < 50; i+=5){
    aslam::ProjectionResult projectionWorked = gencam->project3(line.origin() + i * line.direction(), &out_keypoint);
    EXPECT_EQ(projectionWorked, aslam::ProjectionResult(aslam::ProjectionResult::Status::KEYPOINT_VISIBLE));
    EXPECT_NEAR(out_keypoint.x(), 50.000000001214616, 1e-9);
    EXPECT_NEAR(out_keypoint.y(), 69.999999999187054, 1e-9);
  }

  for(int i = 1; i < 50; i+=5){
    Eigen::Matrix<double, 2, 3> jacobian_point;
    Eigen::Vector2d out_keypoint_withJacobian;
    aslam::ProjectionResult projectionWorked = gencam->project3(line.origin() + line.direction(), &out_keypoint_withJacobian, &jacobian_point);
    EXPECT_EQ(projectionWorked, aslam::ProjectionResult(aslam::ProjectionResult::Status::KEYPOINT_VISIBLE));
    EXPECT_NEAR(out_keypoint_withJacobian.x(), 50.000000001214616, 1e-9);
    EXPECT_NEAR(out_keypoint_withJacobian.y(), 69.999999999187054, 1e-9);
    EXPECT_NEAR(jacobian_point(0,0), 382.37445151672489, 1e-6);
    EXPECT_NEAR(jacobian_point(0,1), -98.697498645421433, 1e-6);
    EXPECT_NEAR(jacobian_point(0,2), 256.51420845093753, 1e-6);
    EXPECT_NEAR(jacobian_point(1,0), -46.689686510745787, 1e-6);
    EXPECT_NEAR(jacobian_point(1,1), 468.01226948716135, 1e-6);
    EXPECT_NEAR(jacobian_point(1,2), 175.52938683365937, 1e-6);
  }

  for(int i = 1; i < 50; i+=5){
    Eigen::Vector2d out_keypoint_withJacobian;
    aslam::ProjectionResult projectionWorked = gencam->project3Functional(line.origin() + line.direction(), nullptr, nullptr, &out_keypoint_withJacobian);
    EXPECT_EQ(projectionWorked, aslam::ProjectionResult(aslam::ProjectionResult::Status::KEYPOINT_VISIBLE));
    EXPECT_NEAR(out_keypoint_withJacobian.x(), 50.000000001214616, 1e-9);
    EXPECT_NEAR(out_keypoint_withJacobian.y(), 69.999999999187054, 1e-9);
  }

  
}
ASLAM_UNITTEST_ENTRYPOINT
